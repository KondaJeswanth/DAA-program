#include <stdio.h>
#include <stdlib.h>
int compare(const void *a, const void *b) {
    return (*(int *)a - *(int *)b);
}

int** fourSum(int* nums, int numsSize, int target, int* returnSize, int** returnColumnSizes) {
    qsort(nums, numsSize, sizeof(int), compare);

    int maxResultSize = 20000; 
    int** result = (int*)malloc(maxResultSize * sizeof(int));
    returnColumnSizes = (int)malloc(maxResultSize * sizeof(int));
    *returnSize = 0;

    for (int i = 0; i < numsSize - 3; i++) {
        if (i > 0 && nums[i] == nums[i - 1]) {
            continue;
        }

        for (int j = i + 1; j < numsSize - 2; j++) {
            if (j > i + 1 && nums[j] == nums[j - 1]) {
                continue;
            }

            int left = j + 1;
            int right = numsSize - 1;

            while (left < right) {
                int sum = nums[i] + nums[j] + nums[left] + nums[right];

                if (sum == target) {
                    result[returnSize] = (int)malloc(4 * sizeof(int));
                    result[*returnSize][0] = nums[i];
                    result[*returnSize][1] = nums[j];
                    result[*returnSize][2] = nums[left];
                    result[*returnSize][3] = nums[right];
                    (*returnColumnSizes)[*returnSize] = 4;
                    (*returnSize)++;

                    while (left < right && nums[left] == nums[left + 1]) {
                        left++;
                    }
                    while (left < right && nums[right] == nums[right - 1]) {
                        right--;
                    }

                    left++;
                    right--;
                } else if (sum < target) {
                    left++;
                } else {
                    right--;
                }
            }
        }
    }

    return result;
}

int main() {
    int nums1[] = {1, 0, -1, 0, -2, 2};
    int numsSize1 = sizeof(nums1) / sizeof(nums1[0]);
    int target1 = 0;
    int returnSize1;
    int* returnColumnSizes1;
    int** result1 = fourSum(nums1, numsSize1, target1, &returnSize1, &returnColumnSizes1);
    printf("Unique quadruplets for Example 1:\n");
    for (int i = 0; i < returnSize1; i++) {
        printf("[%d,%d,%d,%d]\n", result1[i][0], result1[i][1], result1[i][2], result1[i][3]);
        free(result1[i]); 
    }
    free(result1); 
    free(returnColumnSizes1); 

    int nums2[] = {2, 2, 2, 2, 2};
    int numsSize2 = sizeof(nums2) / sizeof(nums2[0]);
    int target2 = 8;
    int returnSize2;
    int* returnColumnSizes2;
    int** result2 = fourSum(nums2, numsSize2, target2, &returnSize2, &returnColumnSizes2);
    printf("Unique quadruplets for Example 2:\n");
    for (int i = 0; i < returnSize2; i++) {
        printf("[%d,%d,%d,%d]\n", result2[i][0], result2[i][1], result2[i][2], result2[i][3]);
        free(result2[i]); 
    }
    free(result2); 
    free(returnColumnSizes2); 

    return 0;
}
