#include <stdio.h>
#include <stdlib.h>
#include <string.h>

const char* phoneMap[] = {"", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};

// Function to find all combinations recursively
void backtrack(char** result, int* returnSize, char* combination, int index, const char* digits) {
    if (digits[index] == '\0') {
        result[*returnSize] = strdup(combination);
        (*returnSize)++;
        return;
    }

    const char* letters = phoneMap[digits[index] - '0'];
    for (int i = 0; letters[i] != '\0'; i++) {
        combination[index] = letters[i];
        backtrack(result, returnSize, combination, index + 1, digits);
    }
}

// Main function to find letter combinations of a phone number
char** letterCombinations(char* digits, int* returnSize) {
    *returnSize = 0;
    if (digits[0] == '\0') {
        return NULL;
    }

    int maxCombinations = 1;
    for (int i = 0; digits[i] != '\0'; i++) {
        maxCombinations *= strlen(phoneMap[digits[i] - '0']);
    }

    char** result = (char*)malloc(maxCombinations * sizeof(char));
    char* combination = (char*)malloc((strlen(digits) + 1) * sizeof(char));
    combination[strlen(digits)] = '\0';

    backtrack(result, returnSize, combination, 0, digits);

    free(combination);
    return result;
}

int main() {
    char digits[] = "23";
    int returnSize;
    char** combinations = letterCombinations(digits, &returnSize);

    printf("Combinations for %s:\n", digits);
    for (int i = 0; i < returnSize; i++) {
        printf("%s\n", combinations[i]);
        free(combinations[i]);
    }
    free(combinations);

    return 0;
}
